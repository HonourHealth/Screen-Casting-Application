/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package myproject;

import java.awt.Dimension;
import java.awt.Rectangle;
import java.awt.Robot;
import java.awt.Toolkit;
import java.awt.image.BufferedImage;
import java.io.ByteArrayOutputStream;
import java.net.DatagramPacket;
import java.net.DatagramSocket;
import java.net.InetAddress;
import java.net.ServerSocket;
import java.net.Socket;
import javax.imageio.ImageIO;
import javax.swing.JOptionPane;

/**
 *
 * @author onur can
 */
public class NetworkProjectUIServer extends javax.swing.JFrame {

    /**
     * Creates new form NetworkProjectUIServer
     */
    public NetworkProjectUIServer() {
        initComponents();
        setLocationRelativeTo(this);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenuItem1 = new javax.swing.JMenuItem();
        jMenuItem2 = new javax.swing.JMenuItem();
        jMenuItem3 = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel2.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 868, Short.MAX_VALUE)
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 463, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        jMenu1.setText("File");

        jMenuItem1.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_L, java.awt.event.InputEvent.CTRL_MASK));
        jMenuItem1.setText("List Active Connections");
        jMenuItem1.setToolTipText("");
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem1ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem1);

        jMenuItem2.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_C, java.awt.event.InputEvent.CTRL_MASK));
        jMenuItem2.setText("Close Session to");
        jMenuItem2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem2ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem2);

        jMenuItem3.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.CTRL_MASK));
        jMenuItem3.setText("Start Broadcast");
        jMenuItem3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem3ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem3);

        jMenuBar1.add(jMenu1);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    boolean Listactiveconnections = false;
    int counter = 0;
    InetAddress [] array = new InetAddress [200];
    InetAddress IPAddress;
    InetAddress tempIP = null;
    private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1ActionPerformed
        Listactiveconnections = true;
        if(Listactiveconnections)
        {
            Listactiveconnections = false;
            new Thread(new Runnable() {
                    @Override
            public void run() {
                
                int temp2;
                for (temp2 = counter ; temp2 >= 0 ; temp2-- )
                {
                    JOptionPane.showMessageDialog(null, "Client Number: " + counter + "   IP: " + array[counter]);
                }
                
            }
            }).start();
            //counter++;
        }
    }//GEN-LAST:event_jMenuItem1ActionPerformed

    private void jMenuItem2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem2ActionPerformed
        // Disconnect client's connection here:
    }//GEN-LAST:event_jMenuItem2ActionPerformed
    boolean startedalready = false;
    
    private void jMenuItem3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem3ActionPerformed
       
        // Start streaming I mean broadcast 
       
        if (!startedalready) { 
            startedalready = true;
            new Thread(new Runnable() {
                @Override
                public void run() {
                    try {
                        Robot Mrrobot = new Robot();
                        Dimension dimension = Toolkit.getDefaultToolkit().getScreenSize();
                        while (startedalready) {
                            ServerSocket serversoc = new ServerSocket(8888);
                            Socket normalsoc = serversoc.accept();
                            BufferedImage buffimg = Mrrobot.createScreenCapture(new Rectangle(0, 0, (int) dimension.getWidth(), (int) dimension.getHeight()));

                            ByteArrayOutputStream outputstream = new ByteArrayOutputStream();
                            ImageIO.write(buffimg, "png", outputstream);
                            normalsoc.getOutputStream().write(outputstream.toByteArray());
                            serversoc.close();
                            //////////////////////////////////////////////////////////////////////
                            DatagramSocket serverSocket = new DatagramSocket(8888);
                            byte[] receiveData = new byte[100];
                            DatagramPacket receivePacket = new DatagramPacket(receiveData, receiveData.length);
                            serverSocket.receive(receivePacket);
                            //String sentence = new String(receivePacket.getData());
                            //System.out.println("RECEIVED: " + sentence);
                            //JOptionPane.showMessageDialog(null, "RECEIVED: " + sentence);
                            IPAddress = receivePacket.getAddress();
                            //array [counter] = IPAddress;
                            /*
                            if(array[counter]==null)
                            {
                                hm.put(IPAddress,counter);
                            }
                            else
                            {
                                
                            }
                            */
                                //en yenisi
                                /*
                                if(array[counter] == null)
                                {
                                    array [counter] = IPAddress;
                                    array [counter + 1] = IPAddress;
                                    counter++;
                                    //JOptionPane.showMessageDialog(null,"inside null Counter is: " + counter);
                                }
                                if(array[counter] == array[counter-1])
                                {
                                    array[counter] = null;
                                   // JOptionPane.showMessageDialog(null,"inside multiple client Counter is: " + counter);
                                }
                                */  
                                    /*
                                    if(array[counter] != IPAddress)
                                    {
                                    //counter++;
                                    JOptionPane.showMessageDialog(null,"inside multiple client Counter is: " + counter);
                                    }
                                    */
                                
                            
                            
                            int port = receivePacket.getPort();
                            array [counter] = IPAddress;
                            if(tempIP != null){   
                                String a = tempIP.toString();
                                String b = IPAddress.toString();
                                //JOptionPane.showMessageDialog(null, a.equals(b));
                                
                               if(a.equals(b))
                               {
                                   //tempIP = IPAddress;
                                   //counter++;
                               }else{
                                   tempIP = IPAddress;
                                   counter++;
                               }
                                
                            }else{
                                tempIP = IPAddress;
                                
                            }
                   
                            
                            serverSocket.close();
                            
                            //////////////////////////////////////////////////////////////////////////////
                            try {
                                Thread.sleep(15);
                            } catch (Exception e) {
                            }
                        }
                    } catch (Exception e) {e.printStackTrace();
                        JOptionPane.showMessageDialog(null, e);
                    }
                   
                }
            }).start();
            JOptionPane.showMessageDialog(this, "Server Started.");
            } else {
            startedalready = false;
        }
    }//GEN-LAST:event_jMenuItem3ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(NetworkProjectUIServer.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(NetworkProjectUIServer.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(NetworkProjectUIServer.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(NetworkProjectUIServer.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new NetworkProjectUIServer().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JMenuItem jMenuItem2;
    private javax.swing.JMenuItem jMenuItem3;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    // End of variables declaration//GEN-END:variables
}
